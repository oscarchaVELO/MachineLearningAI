#!/usr/bin/env python3

# Copyright (c) 2016 Anki, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License in the file LICENSE.txt or at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''Project seems to have issues running without the text above'''

'''Oscar Cha /March 23 2021/ ROBAI 101
I have refrenced some code from the cozmo tutorials.
The license i have will be in the folder.coz'''
'''
Cozmo: embedded comments including your name, date and class ID
(located at the top of the source file).
Don't forget to reference all open source code that you used.

Oscar Cha /March 23 2021/ ROBAI 101
I have refrenced some code from the cozmo tutorials.
'''

import asyncio
import time

import cozmo
from cozmo.util import degrees, distance_mm, speed_mmps

def follow_faces(robot: cozmo.robot.Robot):
    robot.move_lift(-3)
    robot.set_head_angle(cozmo.robot.MAX_HEAD_ANGLE).wait_for_completed()

    face_to_follow = None

    print("Press CTRL-C to quit")
    while True:
        turn_action = None
        if face_to_follow:
            
            robot.say_text("Evacuate the area immediatly").wait_for_completed()
            break
            
            

        if not (face_to_follow and face_to_follow.is_visible):
            
            try:
                face_to_follow = robot.world.wait_for_observed_face(timeout=10)
            except asyncio.TimeoutError:
                robot.say_text("No human detected site secured extracting object immediatly").wait_for_completed()

                break

        if turn_action:
            
            turn_action.wait_for_completed()

          
    look_around = robot.start_behavior(cozmo.behavior.BehaviorTypes.LookAroundInPlace)

    
    cube = None

    try:
        cube = robot.world.wait_for_observed_light_cube(timeout=30)
        print("Found cube", cube)

    except asyncio.TimeoutError:
        print("Didn't find a cube :-(")

    finally:
        
        look_around.stop()

    if cube is None:
        robot.play_anim_trigger(cozmo.anim.Triggers.MajorFail)
        return

    

    

   

    charger = None
    if robot.world.charger:
        if robot.world.charger.pose.is_comparable(robot.pose):
            print("Cozmo already knows where the charger is!")
            charger = robot.world.charger
        else:
            
            pass

    if not charger:
        
        look_around = robot.start_behavior(cozmo.behavior.BehaviorTypes.LookAroundInPlace)
        try:
            charger = robot.world.wait_for_observed_charger(timeout=30)
            print("Found charger: %s" % charger)
        except asyncio.TimeoutError:
            print("Didn't see the charger")
        finally:
            
            look_around.stop()

    if charger:
        

        
        robot.say_text("Threat detected").wait_for_completed()
        action = robot.dock_with_cube(cube, approach_angle=cozmo.util.degrees(180), num_retries=2)
        action.wait_for_completed()
        robot.drive_straight(distance_mm(190), speed_mmps(70)).wait_for_completed()
        action = robot.dock_with_cube(cube)
        action.wait_for_completed()
        robot.say_text("Threat intercepted").wait_for_completed()
        robot.move_lift(2)
        print("result:", action.result)
    
        
       


       

        action = robot.go_to_object(charger, distance_mm(65.0))
        action.wait_for_completed()
        print("Completed action: result = %s" % action)
        print("Done.")

    
cozmo.run_program(follow_faces, use_viewer=True, force_viewer_on_top=True)
